@model FoodOrderingSystem.Models.Payment

@{
    ViewData["Title"] = "Create Payment";
    // Check if the current user is admin or staff
    bool isAdmin = User.IsInRole("Admin") || User.IsInRole("Staff");
}

<div class="container">
    <h2>Create Payment</h2>
    <hr />

    <div class="row">
        <div class="col-md-8">
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger">
                    <h5>There were errors with your payment:</h5>
                    <ul>
                        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                        {
                            <li>@error.ErrorMessage</li>
                        }
                    </ul>
                </div>
            }

            <form asp-controller="Payment" asp-action="Create" method="post" id="paymentForm">
                @Html.AntiForgeryToken()
                <input type="hidden" name="tempOrderId" value="@ViewBag.TempOrderId" />
                <!-- CouponCode field will be added dynamically via JS when needed -->
                
                <div class="form-group mb-3">
                    <label class="form-label">Order Reference</label>
                    <input type="text" class="form-control" value="@ViewBag.TempOrderId" readonly />
                    <small class="text-muted">This is a temporary reference until payment is complete</small>
                </div>
                
                <div class="form-group mb-3">
                    <label class="form-label">Payment Method</label>
                    <select name="PaymentMethod" class="form-select" required id="paymentMethodSelect">
                        <option value="">-- Select Payment Method --</option>
                        <option value="Credit Card">Credit Card</option>
                        <option value="PayPal">PayPal</option>
                        <option value="Bank Transfer">Bank Transfer</option>
                        <option value="Cash on Delivery">Cash on Delivery</option>
                        @if (isAdmin)
                        {
                            <option value="Manual Entry">Manual Entry (Admin)</option>
                        }
                    </select>
                    @if (ViewData.ModelState["PaymentMethod"]?.Errors.Count > 0)
                    {
                        <span class="text-danger">@ViewData.ModelState["PaymentMethod"].Errors.First().ErrorMessage</span>
                    }
                </div>
                
                <!-- Admin notes field for manual entry -->
                <div class="form-group mb-3" id="manualEntryNotes" style="display: none;">
                    <label class="form-label">Admin Notes (Optional)</label>
                    <textarea class="form-control" name="AdminNotes" rows="3" placeholder="Enter details about this manual payment..."></textarea>
                    <small class="text-muted">Please include the reason for this manual entry and any relevant payment details</small>
                </div>
                
                <div class="form-group mb-3">
                    <label class="form-label">Amount</label>
                    <input type="number" name="Amount" class="form-control" value="@ViewBag.PendingOrderTotal" readonly step="0.01" />
                    @if (ViewData.ModelState["Amount"]?.Errors.Count > 0)
                    {
                        <span class="text-danger">@ViewData.ModelState["Amount"].Errors.First().ErrorMessage</span>
                    }
                </div>
                
                <div class="card mb-3">
                    <div class="card-header">
                        <h5 class="mb-0">Apply Coupon (Optional)</h5>
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            <label for="couponCodeInput" class="form-label">Coupon Code</label>
                            <div class="input-group">
                                <input type="text" id="couponCodeInput" class="form-control" placeholder="Enter coupon code" />
                                <button type="button" id="applyCoupon" class="btn btn-outline-primary">Apply</button>
                            </div>
                            <div id="couponMessage" class="form-text mt-2"></div>
                        </div>
                    </div>
                </div>
                
                <div class="form-group d-flex gap-2 mt-4">
                    <button type="submit" class="btn btn-primary">Complete Payment</button>
                    <a href="@Url.Action("Confirmation", "Order")" class="btn btn-outline-secondary">Back to Order</a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        // Track if a coupon has been applied
        let appliedCouponCode = '';
        
        // Handle showing/hiding manual entry notes for admins
        document.getElementById('paymentMethodSelect').addEventListener('change', function() {
            const manualEntryDiv = document.getElementById('manualEntryNotes');
            if (this.value === 'Manual Entry') {
                manualEntryDiv.style.display = 'block';
            } else {
                manualEntryDiv.style.display = 'none';
            }
        });
        
        document.getElementById('applyCoupon').addEventListener('click', function() {
            const couponCode = document.getElementById('couponCodeInput').value.trim();
            const messageEl = document.getElementById('couponMessage');
            
            if (!couponCode) {
                messageEl.innerHTML = '<span class="text-danger">Please enter a coupon code</span>';
                return;
            }
            
            // Validate the coupon
            fetch(`/Coupon/ValidateForCheckout?code=${encodeURIComponent(couponCode)}`)
                .then(response => response.json())
                .then(data => {
                    if (data.valid) {
                        // Calculate discount
                        const amountInput = document.querySelector('input[name="Amount"]');
                        const currentAmount = parseFloat(amountInput.value);
                        const discountAmount = currentAmount * (data.coupon.discountValue / 100);
                        const newAmount = (currentAmount - discountAmount).toFixed(2);
                        
                        // Update amount
                        amountInput.value = newAmount;
                        
                        // Store the applied coupon code
                        appliedCouponCode = couponCode;
                        
                        messageEl.innerHTML = `<span class="text-success">Coupon applied! You saved $${discountAmount.toFixed(2)}</span>`;
                    } else {
                        messageEl.innerHTML = `<span class="text-danger">${data.message}</span>`;
                    }
                })
                .catch(error => {
                    messageEl.innerHTML = '<span class="text-danger">Error validating coupon</span>';
                    console.error('Error:', error);
                });
        });
        
        // Add the coupon code to the form only when submitting if one was applied
        document.getElementById('paymentForm').addEventListener('submit', function(e) {
            if (appliedCouponCode) {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'CouponCode';
                input.value = appliedCouponCode;
                this.appendChild(input);
            }
        });
    </script>
}
