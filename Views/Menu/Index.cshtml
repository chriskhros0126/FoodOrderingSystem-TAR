@* FOR ADMIN ONLY *@

@model IEnumerable<FoodOrderingSystem.Models.Dish>

@{
    ViewData["Title"] = "Menu Management";
}

<div class="container">
    <h1>Menu Management</h1>

    <div id="alert-container"></div>

    <div id="filter-notification" class="alert alert-info alert-dismissible fade show d-none" role="alert">
        <span id="notification-text"></span>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>

    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <form method="get" class="row g-3">
                        <div class="col-md-3">
                            <label for="category" class="form-label">Category</label>
                            <select name="category" id="category" class="form-select" onchange="this.form.submit()">
                                <option value="">All Categories</option>
                                @foreach (var cat in ViewBag.Categories)
                                {
                                    <option value="@cat" selected="@(ViewBag.CurrentCategory == cat)">@cat</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="sortOrder" class="form-label">Sort By</label>
                            <select name="sortOrder" id="sortOrder" class="form-select" onchange="this.form.submit()">
                                <option value="">Default</option>
                                <option value="price_asc" selected="@(ViewBag.CurrentSort == "price_asc")">Price: Low to High</option>
                                <option value="price_desc" selected="@(ViewBag.CurrentSort == "price_desc")">Price: High to Low</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <div class="form-check mt-4">
                                <input type="checkbox" class="form-check-input" id="specialOnly" name="specialOnly" value="true" 
                                       @(ViewBag.SpecialOnly == true ? "checked" : "") onchange="this.form.submit()">
                                <label class="form-check-label" for="specialOnly">Show Specials Only</label>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mt-4">
                                <a asp-action="Create" class="btn btn-primary">Create New Dish</a>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    @Html.AntiForgeryToken()

    <div class="row">
        @foreach (var item in Model)
        {
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    @if (!string.IsNullOrEmpty(item.ImageUrl))
                    {
                        <img src="@item.ImageUrl" class="card-img-top" alt="@item.Name" style="height: 200px; object-fit: cover;">
                    }
                    <div class="card-body">
                        <h5 class="card-title">@item.Name</h5>
                        <p class="card-text">@item.Description</p>
                        <p class="card-text"><strong>Price: </strong>@item.Price.ToString("C")</p>
                        <p class="card-text"><strong>Category: </strong>@item.Category</p>
                        <div class="form-check form-switch mb-2">
                            <input class="form-check-input" type="checkbox" role="switch"
                                   onchange="toggleAvailability(this, @item.Id)"
                                   @(item.IsAvailable ? "checked" : "")>
                            <label class="form-check-label">Available</label>
                        </div>
                        <div class="form-check mb-2">
                            <input class="form-check-input" type="checkbox" disabled checked="@item.IsSpecialToday">
                            <label class="form-check-label">Special Today</label>
                        </div>
                        <div class="btn-group">
                            <td>
                                <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-primary">Edit</a>
                                <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-info">Details</a>
                                <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-danger">Delete</a>
                                <a asp-action="ManageIngredients" asp-route-id="@item.Id" class="btn btn-sm btn-success">Ingredients</a>
                            </td>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            checkAndShowFilterNotification();
        });

        // Show notification based on applied filters
        function checkAndShowFilterNotification() {
            const category = document.getElementById('category').value;
            const sortOrder = document.getElementById('sortOrder').value;
            const specialOnly = document.getElementById('specialOnly').checked;
            
            let notifications = [];
            
            if (category) {
                notifications.push(`Category: ${category}`);
            }
            
            if (sortOrder) {
                let sortText = '';
                switch(sortOrder) {
                    case 'price_asc':
                        sortText = 'Price: Low to High';
                        break;
                    case 'price_desc':
                        sortText = 'Price: High to Low';
                        break;
                    default:
                        sortText = sortOrder;
                }
                notifications.push(`Sorted by: ${sortText}`);
            }
            
            if (specialOnly) {
                notifications.push('Showing Special Items Only');
            }
            
            const notification = document.getElementById('filter-notification');
            const notificationText = document.getElementById('notification-text');
            
            if (notifications.length > 0) {
                notificationText.textContent = 'Filters applied: ' + notifications.join(', ');
                notification.classList.remove('d-none');
            } else {
                notification.classList.add('d-none');
            }
        }

        function showAlert(message, type = 'danger') {
            const alertContainer = document.getElementById('alert-container');
            const alert = document.createElement('div');
            alert.className = `alert alert-${type} alert-dismissible fade show`;
            alert.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            alertContainer.appendChild(alert);

            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                alert.remove();
            }, 5000);
        }

        function showToast(message, type = 'primary') {
            // Create toast container if it doesn't exist
            let toastContainer = document.getElementById('toast-container');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.id = 'toast-container';
                toastContainer.className = 'position-fixed bottom-0 end-0 p-3';
                document.body.appendChild(toastContainer);
            }
            
            // Create toast element
            const toastId = 'toast-' + Date.now();
            const toast = document.createElement('div');
            toast.id = toastId;
            toast.className = `toast align-items-center text-white bg-${type} border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;
            
            toastContainer.appendChild(toast);
            
            // Initialize and show the toast
            const bsToast = new bootstrap.Toast(toast, { autohide: true, delay: 3000 });
            bsToast.show();
            
            // Remove toast after it's hidden
            toast.addEventListener('hidden.bs.toast', function() {
                toast.remove();
            });
        }

        async function toggleAvailability(checkbox, dishId) {
            const originalState = checkbox.checked;
            try {
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                const response = await fetch('/Menu/ToggleAvailability', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({ id: dishId })
                });

                const result = await response.json();

                if (!response.ok || !result.success) {
                    throw new Error(result.message || 'Failed to update availability');
                }

                checkbox.checked = result.isAvailable;
                showToast('Availability updated successfully!', 'success');
            } catch (error) {
                console.error('Error:', error);
                checkbox.checked = originalState; // Revert the checkbox
                showToast(error.message || 'Failed to update availability', 'danger');
            }
        }
    </script>
}
