@model FoodOrderingSystem.Models.ViewModels.DishIngredientsViewModel

@{
    ViewData["Title"] = "Manage Ingredients";
}

<div class="container-fluid">
    <h2>Manage Ingredients for @Model.DishName</h2>
    
    <div id="alert-container"></div>
    
    <div class="row">
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h5>Current Ingredients</h5>
                </div>
                <div class="card-body">
                    @if (!Model.CurrentIngredients.Any())
                    {
                        <p class="text-muted">No ingredients added yet.</p>
                    }
                    else
                    {
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Ingredient</th>
                                    <th>Quantity Required</th>
                                    <th>Unit</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var ingredient in Model.CurrentIngredients)
                                {
                                    <tr>
                                        <td>@ingredient.InventoryItem.Name</td>
                                        <td>@ingredient.QuantityRequired</td>
                                        <td>@ingredient.InventoryItem.Unit</td>
                                        <td>
                                            <form asp-action="RemoveIngredient" method="post">
                                                <input type="hidden" name="dishId" value="@Model.DishId" />
                                                <input type="hidden" name="ingredientId" value="@ingredient.InventoryItemId" />
                                                <button type="submit" class="btn btn-sm btn-danger">Remove</button>
                                            </form>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Add Ingredient</h5>
                </div>
                <div class="card-body">
                    <form asp-action="AddIngredient" method="post">
                        <input type="hidden" name="DishId" value="@Model.DishId" />
                        
                        <div class="form-group mb-3">
                            <label for="InventoryItemId">Ingredient</label>
                            <select name="InventoryItemId" id="InventoryItemId" class="form-select" required>
                                <option value="">-- Select Ingredient --</option>
                                @foreach (var ingredient in Model.AvailableIngredients)
                                {
                                    <option value="@ingredient.Id">@ingredient.Name (@ingredient.Unit)</option>
                                }
                            </select>
                        </div>
                        
                        <div class="form-group mb-3">
                            <label for="QuantityRequired">Quantity Required</label>
                            <input type="number" name="QuantityRequired" id="QuantityRequired" class="form-control" 
                                   step="0.001" min="0.001" required />
                        </div>
                        
                        <button type="submit" class="btn btn-primary">Add Ingredient</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    <div class="mt-3">
        <a asp-action="Index" class="btn btn-secondary">Back to Menu</a>
    </div>
</div>

@section Scripts {
    <script>
        // Check if there's a success or error message in TempData
        document.addEventListener('DOMContentLoaded', function() {
            @if (TempData["SuccessMessage"] != null)
            {
                <text>
                showToast('@TempData["SuccessMessage"]', 'success');
                </text>
            }
            
            @if (TempData["ErrorMessage"] != null)
            {
                <text>
                showToast('@TempData["ErrorMessage"]', 'danger');
                </text>
            }
            
            // Add form submit handlers
            const forms = document.querySelectorAll('form');
            forms.forEach(form => {
                form.addEventListener('submit', function() {
                    const isRemove = form.action.includes('RemoveIngredient');
                    const isAdd = form.action.includes('AddIngredient');
                    
                    if (isRemove) {
                        const ingredientRow = form.closest('tr');
                        const ingredientName = ingredientRow.querySelector('td').textContent;
                        showToast(`Removing ${ingredientName}...`, 'info');
                    }
                    
                    if (isAdd) {
                        const ingredientSelect = form.querySelector('#InventoryItemId');
                        if (ingredientSelect.selectedIndex > 0) {
                            const ingredientName = ingredientSelect.options[ingredientSelect.selectedIndex].text;
                            showToast(`Adding ${ingredientName}...`, 'info');
                        }
                    }
                });
            });
        });

        function showToast(message, type = 'primary') {
            // Create toast container if it doesn't exist
            let toastContainer = document.getElementById('toast-container');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.id = 'toast-container';
                toastContainer.className = 'position-fixed bottom-0 end-0 p-3';
                document.body.appendChild(toastContainer);
            }
            
            // Create toast element
            const toastId = 'toast-' + Date.now();
            const toast = document.createElement('div');
            toast.id = toastId;
            toast.className = `toast align-items-center text-white bg-${type} border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;
            
            toastContainer.appendChild(toast);
            
            // Initialize and show the toast
            const bsToast = new bootstrap.Toast(toast, { autohide: true, delay: 3000 });
            bsToast.show();
            
            // Remove toast after it's hidden
            toast.addEventListener('hidden.bs.toast', function() {
                toast.remove();
            });
        }
    </script>
}