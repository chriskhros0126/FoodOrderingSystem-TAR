@model FoodOrderingSystem.Models.Order
@{
    ViewData["Title"] = "Place Order";
}

<div class="container">
    <h2>Place Your Order</h2>

    <div id="filter-notification" class="alert alert-info alert-dismissible fade show d-none" role="alert">
        <span id="notification-text"></span>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>

    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <form method="get" class="row g-3">
                        <div class="col-md-3">
                            <label for="category" class="form-label">Category</label>
                            <select name="category" id="category" class="form-select" onchange="this.form.submit()">
                                <option value="">All Categories</option>
                                @foreach (var cat in ViewBag.Categories)
                                {
                                    <option value="@cat" selected="@(ViewBag.CurrentCategory == cat)">@cat</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="sortOrder" class="form-label">Sort By</label>
                            <select name="sortOrder" id="sortOrder" class="form-select" onchange="this.form.submit()">
                                <option value="">Default</option>
                                <option value="price_asc" selected="@(ViewBag.CurrentSort == "price_asc")">Price: Low to High</option>
                                <option value="price_desc" selected="@(ViewBag.CurrentSort == "price_desc")">Price: High to Low</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <div class="form-check mt-4">
                                <input type="checkbox" class="form-check-input" id="specialOnly" name="specialOnly" value="true" 
                                       @(ViewBag.SpecialOnly == true ? "checked" : "") onchange="this.form.submit()">
                                <label class="form-check-label" for="specialOnly">Show Specials Only</label>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Menu Items -->
        <div class="col-md-8">
            <div class="row">
                @foreach (var dish in ViewBag.Dishes)
                {
                    <div class="col-md-6 mb-4">
                        <div class="card h-100">
                            <div class="card-img-container" style="height: 200px; overflow: hidden;">
                                <img src="@dish.ImageUrl" class="card-img-top" alt="@dish.Name" style="width: 100%; height: 100%; object-fit: cover;">
                            </div>
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@dish.Name</h5>
                                <p class="card-text flex-grow-1">@dish.Description</p>
                                <p class="card-text"><strong>Price: @dish.Price.ToString("C")</strong></p>
                                <div class="input-group mt-auto">
                                    <button class="btn btn-outline-secondary" type="button" onclick="decreaseQuantity(@dish.Id)">-</button>
                                    <input type="number" class="form-control text-center" id="quantity_@dish.Id" value="0" min="0">
                                    <button class="btn btn-outline-secondary" type="button" onclick="increaseQuantity(@dish.Id)">+</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Order Summary -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Order Summary</h5>
                </div>
                <div class="card-body">
                    <form id="orderForm" asp-action="Create">
                        @Html.AntiForgeryToken()
                        <div class="mb-3">
                            <label asp-for="CustomerName" class="form-label">Name</label>
                            <input asp-for="CustomerName" class="form-control" required minlength="2">
                            <div class="invalid-feedback">Please enter your name (minimum 2 characters)</div>
                        </div>
                        <div class="mb-3">
                            <label asp-for="CustomerPhone" class="form-label">Phone</label>
                            <input asp-for="CustomerPhone" class="form-control" required pattern="[0-9]{10,11}" title="Please enter a valid phone number">
                            <div class="invalid-feedback">Please enter a valid 10-digit phone number</div>
                        </div>
                        <div class="mb-3">
                            <label asp-for="DeliveryAddress" class="form-label">Delivery Address</label>
                            <textarea asp-for="DeliveryAddress" class="form-control" required minlength="10"></textarea>
                            <div class="invalid-feedback">Please enter your complete delivery address</div>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Notes" class="form-label">Special Instructions</label>
                            <textarea asp-for="Notes" class="form-control"></textarea>
                        </div>
                        <div class="mb-3">
                            <h6>Selected Items:</h6>
                            <div id="orderItems">
                                <!-- Order items will be displayed here -->
                            </div>
                        </div>
                        <div class="mb-3">
                            <h5>Total: <span id="totalAmount">$0.00</span></h5>
                        </div>
                        <button type="submit" class="btn btn-primary w-100" id="submitButton">
                            <span class="spinner-border spinner-border-sm d-none" id="submitSpinner" role="status" aria-hidden="true"></span>
                            Place Order
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Show filter notification when page loads with filters
        document.addEventListener('DOMContentLoaded', function() {
            checkAndShowFilterNotification();
            updateOrderSummary();
        });

        // Show notification based on applied filters
        function checkAndShowFilterNotification() {
            const category = document.getElementById('category').value;
            const sortOrder = document.getElementById('sortOrder').value;
            const specialOnly = document.getElementById('specialOnly').checked;
            
            let notifications = [];
            
            if (category) {
                notifications.push(`Category: ${category}`);
            }
            
            if (sortOrder) {
                let sortText = '';
                switch(sortOrder) {
                    case 'price_asc':
                        sortText = 'Price: Low to High';
                        break;
                    case 'price_desc':
                        sortText = 'Price: High to Low';
                        break;
                    default:
                        sortText = sortOrder;
                }
                notifications.push(`Sorted by: ${sortText}`);
            }
            
            if (specialOnly) {
                notifications.push('Showing Special Items Only');
            }
            
            const notification = document.getElementById('filter-notification');
            const notificationText = document.getElementById('notification-text');
            
            if (notifications.length > 0) {
                notificationText.textContent = 'Filters applied: ' + notifications.join(', ');
                notification.classList.remove('d-none');
            } else {
                notification.classList.add('d-none');
            }
        }

        // Add event listeners to filters
        document.getElementById('category').addEventListener('change', function() {
            this.form.submit();
        });
        
        document.getElementById('sortOrder').addEventListener('change', function() {
            this.form.submit();
        });
        
        document.getElementById('specialOnly').addEventListener('change', function() {
            this.form.submit();
        });

        let orderItems = {};

        function increaseQuantity(dishId) {
            const input = document.getElementById(`quantity_${dishId}`);
            const previousValue = parseInt(input.value);
            input.value = previousValue + 1;
            
            if (previousValue === 0) {
                // Item was just added to cart
                const dishes = @Html.Raw(Json.Serialize(ViewBag.Dishes));
                const selectedDish = dishes.find(d => d.id == dishId);
                if (selectedDish) {
                    showToast(`${selectedDish.name} added to your order`);
                }
            }
            
            updateOrderSummary();
        }

        function decreaseQuantity(dishId) {
            const input = document.getElementById(`quantity_${dishId}`);
            const previousValue = parseInt(input.value);
            
            if (previousValue > 0) {
                input.value = previousValue - 1;
                
                if (previousValue === 1) {
                    // Item was just removed from cart
                    const dishes = @Html.Raw(Json.Serialize(ViewBag.Dishes));
                    const selectedDish = dishes.find(d => d.id == dishId);
                    if (selectedDish) {
                        showToast(`${selectedDish.name} removed from your order`);
                    }
                }
                
                updateOrderSummary();
            }
        }
        
        function showToast(message, type = 'primary') {
            // Create toast container if it doesn't exist
            let toastContainer = document.getElementById('toast-container');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.id = 'toast-container';
                toastContainer.className = 'position-fixed bottom-0 end-0 p-3';
                document.body.appendChild(toastContainer);
            }
            
            // Create toast element
            const toastId = 'toast-' + Date.now();
            const toast = document.createElement('div');
            toast.id = toastId;
            toast.className = `toast align-items-center text-white bg-${type} border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;
            
            toastContainer.appendChild(toast);
            
            // Initialize and show the toast
            const bsToast = new bootstrap.Toast(toast, { autohide: true, delay: 3000 });
            bsToast.show();
            
            // Remove toast after it's hidden
            toast.addEventListener('hidden.bs.toast', function() {
                toast.remove();
            });
        }

        function updateOrderSummary() {
            const orderItemsDiv = document.getElementById('orderItems');
            const totalAmountSpan = document.getElementById('totalAmount');
            let total = 0;
            let itemsHtml = '';

            // Get all quantity inputs
            const quantityInputs = document.querySelectorAll('input[type="number"]');
            quantityInputs.forEach(input => {
                const dishId = input.id.split('_')[1];
                const quantity = parseInt(input.value);
                
                if (quantity > 0) {
                    const dishes = @Html.Raw(Json.Serialize(ViewBag.Dishes));
                    const selectedDish = dishes.find(d => d.id == dishId);
                    
                    if (selectedDish) {
                        const itemTotal = selectedDish.price * quantity;
                        total += itemTotal;
                        itemsHtml += `
                            <div class="d-flex justify-content-between mb-2">
                                <span>${selectedDish.name} x ${quantity}</span>
                                <span>$${itemTotal.toFixed(2)}</span>
                            </div>`;
                    }
                }
            });

            orderItemsDiv.innerHTML = itemsHtml || '<p>No items selected</p>';
            totalAmountSpan.textContent = `$${total.toFixed(2)}`;
        }

        // Handle form submission
        document.getElementById('orderForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const orderItems = [];
            const quantityInputs = document.querySelectorAll('input[type="number"]');
            
            quantityInputs.forEach(input => {
                const dishId = input.id.split('_')[1];
                const quantity = parseInt(input.value);
                
                if (quantity > 0) {
                    orderItems.push({
                        dishId: parseInt(dishId),
                        quantity: quantity
                    });
                }
            });

            if (orderItems.length === 0) {
                showToast('Please select at least one item', 'danger');
                return;
            }

            const formData = {
                customerName: document.getElementById('CustomerName').value,
                customerPhone: document.getElementById('CustomerPhone').value,
                deliveryAddress: document.getElementById('DeliveryAddress').value,
                notes: document.getElementById('Notes').value,
                orderItems: orderItems
            };

            // Show notification
            showToast('Processing your order...', 'info');

            // Show loading state
            const submitButton = document.getElementById('submitButton');
            const submitSpinner = document.getElementById('submitSpinner');
            submitButton.disabled = true;
            submitSpinner.classList.remove('d-none');

            try {
                const response = await fetch('/Order/Create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(formData)
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        window.location.href = `/Order/Confirmation`;
                        return;
                    }
                }

                const errorText = await response.text();
                throw new Error(errorText || 'Failed to place order');
            } catch (error) {
                console.error('Error:', error);
                showToast('Failed to place order: ' + error.message, 'danger');
            } finally {
                // Reset loading state
                submitButton.disabled = false;
                submitSpinner.classList.add('d-none');
            }
        });
    </script>
} 