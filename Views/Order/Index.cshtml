@{
    ViewData["Title"] = "Order Management";
}

<div class="container">
    <h2>Order Management</h2>

    <!-- Status Filter -->
    <div class="btn-group mb-3" role="group">
        <button type="button" class="btn btn-primary" onclick="loadOrders()" id="allOrdersBtn">All Orders</button>
        <button type="button" class="btn btn-outline-primary" onclick="loadOrders('New')" id="newOrdersBtn">New</button>
        <button type="button" class="btn btn-outline-primary" onclick="loadOrders('Confirmed')" id="confirmedOrdersBtn">Confirmed</button>
        <button type="button" class="btn btn-outline-primary" onclick="loadOrders('Preparing')" id="preparingOrdersBtn">Preparing</button>
        <button type="button" class="btn btn-outline-primary" onclick="loadOrders('OutForDelivery')" id="deliveryOrdersBtn">Out for Delivery</button>
        <button type="button" class="btn btn-outline-primary" onclick="loadOrders('Delivered')" id="deliveredOrdersBtn">Delivered</button>
        <button type="button" class="btn btn-outline-primary" onclick="loadOrders('Cancelled')" id="cancelledOrdersBtn">Cancelled</button>
    </div>

    <!-- Orders List -->
    <div id="ordersList">
        <!-- Orders will be loaded here -->
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading orders...</p>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        // Load orders immediately when page loads
        document.addEventListener('DOMContentLoaded', function() {
            loadOrders();
            initializeEventListeners();
        });

        // Initialize SignalR connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/orderHub")
            .withAutomaticReconnect()
            .build();

        // Start the connection
        connection.start()
            .then(() => {
                console.log("SignalR Connected");
            })
            .catch(err => console.error(err));

        // Handle order status updates
        connection.on("OrderStatusUpdated", (orderId, newStatus) => {
            loadOrders(); // Reload orders when status changes
        });

        // Function to load orders
        function loadOrders(status = null) {
            let url = '/Order/GetOrders';
            if (status) {
                url += `?status=${status}`;
            }

            // Update button states
            updateButtonStates(status);

            fetch(url)
                .then(response => response.text())
                .then(html => {
                    document.getElementById('ordersList').innerHTML = html;
                    initializeEventListeners();
                })
                .catch(error => {
                    console.error('Error loading orders:', error);
                    document.getElementById('ordersList').innerHTML = 
                        '<div class="alert alert-danger">Error loading orders. Please try again.</div>';
                });
        }

        // Function to update button states
        function updateButtonStates(activeStatus) {
            const buttons = document.querySelectorAll('.btn-group .btn');
            buttons.forEach(btn => {
                btn.classList.remove('btn-primary');
                btn.classList.add('btn-outline-primary');
            });

            const activeButton = activeStatus 
                ? document.getElementById(`${activeStatus.toLowerCase()}OrdersBtn`)
                : document.getElementById('allOrdersBtn');
            
            if (activeButton) {
                activeButton.classList.remove('btn-outline-primary');
                activeButton.classList.add('btn-primary');
            }
        }

        // Function to update order status
        function updateOrderStatus(orderId, newStatus) {
            fetch('/Order/UpdateStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ id: orderId, newStatus: newStatus })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
            })
            .catch(error => console.error('Error:', error));
        }

        function initializeEventListeners() {
            const statusSelects = document.querySelectorAll('select[name="newStatus"]');
            
            statusSelects.forEach(select => {
                select.addEventListener('change', async function() {
                    const form = this.closest('form');
                    const orderId = form.querySelector('input[name="id"]').value;
                    const newStatus = this.value;
                    
                    try {
                        const response = await fetch(form.action, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: `id=${orderId}&newStatus=${newStatus}`
                        });

                        if (response.ok) {
                            // Update the UI to reflect the new status
                            const badge = this.closest('td').querySelector('.badge');
                            if (badge) {
                                badge.textContent = newStatus;
                                badge.className = `badge ${getStatusBadgeClass(newStatus)}`;
                            }
                        } else {
                            // Revert the selection if the update failed
                            this.value = this.dataset.originalValue;
                        }
                    } catch (error) {
                        console.error('Error updating status:', error);
                        this.value = this.dataset.originalValue;
                    }
                });

                // Store the original value
                select.dataset.originalValue = select.value;
            });
        }

        function getStatusBadgeClass(status) {
            const statusClasses = {
                'New': 'bg-secondary',
                'Confirmed': 'bg-primary',
                'Preparing': 'bg-warning',
                'OutForDelivery': 'bg-info',
                'Delivered': 'bg-success',
                'Cancelled': 'bg-danger'
            };
            return statusClasses[status] || 'bg-secondary';
        }
    </script>
} 